from random import randint, choice, shuffle
from time import sleep
from math import factorial, sin, cos, tan, radians, hypot
from datetime import date, datetime
from fun√ß√µes import funcoes
from fun√ß√µes import operacoes_mat
from webbrowser import open
import urllib.request

    # PROGRAMA PRINCIPAL
funcoes.titulo(sem_iniciar_secao=True, msg='PrOJeTO V1.0', cor='amarelo')
print('Ol√°! Bem vindo ao projeto v1.0!'.replace("Da", "da").replace("De", 'de').replace("Dos", "dos").replace("Das", "Das"))

while True:
    funcoes.menu('Jogos', 'Matem√°tica', 'Gerador', 'Sortear',
                'Brasileir√£o', 'Alistamento', 'Caixa eletr√¥nico',
                'Convers√£o', 'Desconto', 'Aumento', 'Juros', 'Sistema de ajuda', 'Finalizar programa')

    funcoes.escolha_user('Qual sua se√ß√£o?', 13)

    if funcoes.escolha_usuario == 1:    # SE√á√ÉO DE JOGOS
        funcoes.titulo('se√ß√£o de jogos', 'SE√á√ÉO DE JOGOS', 'roxo')

        while True:
            funcoes.menu('Pedra, Papel e Tesoura', 'Jogo da Advinha√ß√£o',
                         'Pal√≠ndromo', 'Pal√≠ndromo', 'Sair da se√ß√£o de jogos')

            funcoes.escolha_user('Qual seu jogo?', 5)
            
            if funcoes.escolha_usuario == 1:   # PEDRA, PAPEL E TESOURA
                funcoes.titulo('Pedra, papel e tesoura', 'JOGO DE PEDRA, PAPEL E TESOURA', 'azul')

                while True:
                    funcoes.menu('PEDRA', 'PAPEL', 'TESOURA',
                                 'Sair da se√ß√£o de jogo de pedra, papel e tesoura')

                    funcoes.escolha_user('Qual sua jogada?', 4)
                    
                    if funcoes.escolha_usuario == 4:
                        sleep(0.7)
                        break

                    bot = randint(0, 2)
                    sleep(0.5)
                    print('\n\033[93mJO')
                    sleep(0.5)
                    print('KEN')
                    sleep(0.5)
                    print('PO!!!\033[m')

                    if funcoes.escolha_usuario == 1:
                        print('\nJogador jogou \033[32mPEDRA\033[m')
                    elif funcoes.escolha_usuario == 2:
                        print('\nJogador jogou \033[32mPAPEL\033[m')
                    else:
                        print('\nJogador jogou \033[32mTESOURA\033[m')

                    if bot == 1:
                        print('Computador jogou \033[32mPEDRA\033[m')
                    elif bot == 2:
                        print('Computador jogou \033[32mPAPEL\033[m')
                    else:
                        print('Computador jogou \033[32mTESOURA\033[m')

                    if funcoes.escolha_usuario == 1 and bot == 3 or funcoes.escolha_usuario == 2 and bot == 1 or funcoes.escolha_usuario == 3 and bot == 2:
                        print('\n\033[94mVoc√™ venceu!üéâ\033[m', end=' ')
                        funcoes.continuar_def('Vamos jogar novamente')
                        
                        if funcoes.continuar == 'N':
                            sleep(0.6)
                            break
                        else:
                            funcoes.linha('azul', '50')
                    
                    elif funcoes.escolha_usuario == bot:
                        print('\n\033[93mEmpatamos!\033[m', end=' ')
                        funcoes.continuar_def('Vamos jogar novamente')
                        
                        if funcoes.continuar == 'N':
                            sleep(0.6)
                            break
                        else:
                            funcoes.linha('azul', '50')
                    
                    else:
                        print('\n\033[94m\033[94mVoc√™ perdeuüòî\033[m', end=' ')
                        funcoes.continuar_def('Vamos jogar novamente')
                        
                        if funcoes.continuar == 'N':
                            sleep(0.6)
                            break
                        else:
                            funcoes.linha('azul', '50')

                funcoes.sair_secao('pedra, papel e tesoura', 'roxo')

            elif funcoes.escolha_usuario == 2: # JOGOS DA ADIVINH√á√ÉO
                funcoes.titulo('Jogo da Adivinha√ß√£o', 'JOGO DA ADIVINHA√á√ÉO', 'azul')

                while True:
                    funcoes.menu('Jogo da Adivinha√ß√£o v1.0',
                                 'Jogo da Adivinha√ß√£o v2.0',
                                 'Voltar')
                        
                    funcoes.escolha_user('Qual sua op√ß√£o?', 3)

                    if funcoes.escolha_usuario == 1:    # jogo 1
                        funcoes.titulo('Jogo da Adivinha√ß√£o v1.0', 'JOGO DA ADIVINHA√á√ÉO v1.0', 'vermelho')

                        while True:
                            funcoes.menu('Facil', 'Normal', 'Dif√≠cil', 'Voltar')

                            funcoes.escolha_user('Qual seu n√≠vel?', 4)
                            
                            if funcoes.escolha_usuario == 1:     # N√≠vel 1
                                print('\033[mVou pensar em um n√∫mero entre \033[94m1 e 5\033[m. Tente adivinhar...')
                                bot = randint(1, 5)
                                print('\033[mEstou escolhendo um n√∫mero...')
                                sleep(1)
                                escolha_jogador = funcoes.verificar_num('Qual n√∫mero eu pensei? ', 5, forcar_valor_int=True)
                                sleep(0.7)

                                if escolha_jogador == bot:
                                    print('\n\033[94mPARAB√âNS!\033[m Voc√™ conseguiu me vencer!', end=' ')
                                else:
                                    print(f'\n\033[94mGANHEI!\033[m Eu pensei no n√∫mero \033[94m{bot}\033[m e n√£o no \033[94m{escolha_jogador}\033[m!', end=' ')
                                    
                                funcoes.continuar_def('Vamos continuar')
                                if funcoes.continuar == 'N':
                                    funcoes.linha('azul')
                                    sleep(0.6)
                                    break
                                else:
                                    funcoes.linha('vermelho')
                                
                            elif funcoes.escolha_usuario == 2:   # N√≠vel 2
                                print('\033[mVou pensar em um n√∫mero entre \033[94m1 e 10\033[m. Tente adivinhar...')
                                bot = randint(1, 10)
                                print('\033[mEstou escolhendo um n√∫mero...')
                                sleep(1)
                                escolha_jogador = funcoes.verificar_num('Qual n√∫mero eu pensei? ', 10, forcar_valor_int=True)
                                sleep(0.7)

                                if escolha_jogador == bot:
                                    print('\n\033[94mPARAB√âNS!\033[m Voc√™ conseguiu me vencer!', end=' ')
                                else:
                                    print(f'\n\033[94mGANHEI!\033[m Eu pensei no n√∫mero \033[94m{bot}\033[m e n√£o no \033[94m{escolha_jogador}\033[m!', end=' ')
                                    
                                funcoes.continuar_def('Vamos continuar')
                                if funcoes.continuar == 'N':
                                    funcoes.linha('azul')
                                    sleep(0.6)
                                    break
                                else:
                                    funcoes.linha('vermelho')

                            elif funcoes.escolha_usuario == 3:   # n√≠vel 3
                                print('\033[mVou pensar em um n√∫mero entre \033[94m1 e 20\033[m. Tente adivinhar...')
                                bot = randint(1, 20)
                                print('\033[mEstou escolhendo um n√∫mero...')
                                sleep(1)
                                escolha_jogador = funcoes.verificar_num('Qual n√∫mero eu pensei? ', 20, forcar_valor_int=True)
                                sleep(0.7)

                                if escolha_jogador == bot:
                                    print('\n\033[94mPARAB√âNS!\033[m Voc√™ conseguiu me vencer!', end=' ')
                                else:
                                    print(f'\n\033[94mGANHEI!\033[m Eu pensei no n√∫mero \033[94m{bot}\033[m e n√£o no \033[94m{escolha_jogador}\033[m!', end=' ')
                                    
                                funcoes.continuar_def('Vamos continuar')
                                if funcoes.continuar == 'N':
                                    funcoes.linha('azul')
                                    sleep(0.6)
                                    break
                                else:
                                    funcoes.linha('vermelho')
                                
                            else:
                                funcoes.sair_secao('jogo da Adivinha√ß√£o v1.0', 'azul')

                    elif funcoes.escolha_usuario == 2:  # Jogo 2
                        funcoes.titulo('Jogo da Adivinha√ß√£o v2.0', 'JOGO DA ADIVINHA√á√ÉO v2.0', 'vermelho')

                        while True:
                            funcoes.menu('Facil', 'Normal', 'Dif√≠cil', 'Voltar')

                            funcoes.escolha_user('Qual sua nivel?\033[92m', 4)
                            
                            if funcoes.escolha_usuario == 1:     # N√≠vel 1
                                bot = randint(1, 10)
                                print('\033[mAcabei de pensar em um n√∫mero entre \033[94m1 a 10\033[m.')
                                print('Ser√° que voc√™ consegui adivinhar qual foi?')
                                cont = 0
                                escolha_jogador = funcoes.verificar_num('Qual n√∫mero eu pensei? ', 10, forcar_valor_int=True)

                                while escolha_jogador != bot:
                                    cont += 1
                                    if escolha_jogador > bot:
                                        print('\033[3;94mMenos... Tente mais uma vez.')
                                        escolha_jogador = funcoes.verificar_num('\033[mQual √© seu palpite? ', 10, forcar_valor_int=True)
                                    else:
                                        print('\033[3;94mMais... Tente mais uma vez.')
                                        escolha_jogador = funcoes.verificar_num('\033[mQual √© seu palpite? ', 10, forcar_valor_int=True)

                                print(f'\033[mAcertou com \033[92m{cont}\033[m tentativas. Parab√©ns!')

                                funcoes.continuar_def('Quer jogar novamente', True)
                                    
                                if funcoes.continuar == 'N':
                                    funcoes.linha('azul')
                                    sleep(0.6)
                                    break
                                else:
                                    funcoes.linha('vermelho')

                            elif funcoes.escolha_usuario == 2:   # N√≠vel 2
                                bot = randint(0, 20)
                                print('\033[mAcabei de pensar em um n√∫mero entre \033[94m1 a 20\033[m.')
                                print('Ser√° que voc√™ consegui adivinhar qual foi?')
                                cont = 0
                                escolha_jogador = funcoes.verificar_num('Qual n√∫mero eu pensei? ', 20, forcar_valor_int=True)

                                while escolha_jogador != bot:
                                    cont += 1
                                    if escolha_jogador > bot:
                                        print('\033[3;94mMenos... Tente mais uma vez.')
                                        escolha_jogador = funcoes.verificar_num('\033[mQual √© seu palpite? ', 20, forcar_valor_int=True)
                                    else:
                                        print('\033[3;94mMais... Tente mais uma vez.')
                                        escolha_jogador = funcoes.verificar_num('\033[mQual √© seu palpite? ', 20, forcar_valor_int=True)

                                print(f'\033[mAcertou com \033[92m{cont}\033[m tentativas. Parab√©ns!')

                                funcoes.continuar_def('Quer jogar novamente', True)
                                    
                                if funcoes.continuar == 'N':
                                    funcoes.linha('azul')
                                    sleep(0.6)
                                    break
                                else:
                                    funcoes.linha('vermelho')
                            
                            elif funcoes.escolha_usuario == 3:   # N√≠vel 3
                                bot = randint(0, 30)
                                print('\033[mAcabei de pensar em um n√∫mero entre \033[94m1 a 30\033[m.')
                                print('Ser√° que voc√™ consegui adivinhar qual foi?')
                                cont = 0
                                escolha_jogador = funcoes.verificar_num('Qual n√∫mero eu pensei? ', 30, forcar_valor_int=True)

                                while escolha_jogador != bot:
                                    cont += 1
                                    if escolha_jogador > bot:
                                        print('\033[3;94mMenos... Tente mais uma vez.')
                                        escolha_jogador = funcoes.verificar_num('\033[mQual √© seu palpite? ', 30, forcar_valor_int=True)
                                    else:
                                        print('\033[3;94mMais... Tente mais uma vez.')
                                        escolha_jogador = funcoes.verificar_num('\033[mQual √© seu palpite? ', 30, forcar_valor_int=True)

                                print(f'\033[mAcertou com \033[92m{cont}\033[m tentativas. Parab√©ns!')

                                funcoes.continuar_def('Quer jogar novamente', True)
                                    
                                if funcoes.continuar == 'N':
                                    funcoes.linha('azul')
                                    sleep(0.6)
                                    break
                                else:
                                    funcoes.linha('vermelho')

                            else:
                                funcoes.sair_secao('jogo da adivinha√ß√£o v2.0', 'azul')
                                break

                    else:
                        funcoes.sair_secao('jogo da adivinha√ß√£o', 'roxo')
                        break

            elif funcoes.escolha_usuario == 3: # PAR OU √çMPAR
                funcoes.titulo('Par ou √çmpar', 'JOGO DE PAR OU √çMPAR', 'azul')

                while True:
                    funcoes.menu('Iniciar jogos', 'Sair da se√ß√£o do jogo par ou √≠mpar')

                    funcoes.escolha_user('Qual sua op√ß√£o', 2)

                    if funcoes.escolha_usuario == 1:
                        cont = 0
                        bot = par_impar = ''

                        while True:
                            escolha_usuario = funcoes.verificar_num('\n\033[mDiga um valor: ', forcar_valor_int=True)
                            usuario = str(input('\033[mPar ou √çmpar? [P/I]\033[92m ')).upper()
                            while usuario != 'P' and usuario != 'I':
                                print('\033[91mOp√ß√£o inv√°lida\033[m. Tente novamente')
                                usuario = str(input('\033[mPar ou √çmpar? [P/I]\033[92m ')).upper()

                            if usuario == 'P':
                                bot = 'I'
                            else:
                                bot = 'P'

                            bot_num = randint(1, 10)
                            tot = escolha_usuario + bot_num

                            if tot % 2 == 0:
                                vencedor = 'PAR'
                            else:
                                vencedor = 'IMPAR'

                            print(f'\n\033[mVoc√™ jogou \033[95m{escolha_usuario}\033[m e o computador jogou \033[95m{bot_num}\033[m. Total de \033[95m{tot}\033[m DEU \033[94m{vencedor}\033[m')
                            funcoes.linha('azul', '40')

                            if vencedor[0] == usuario:
                                print('\033[94mVoc√™ venceu!\033[m')
                            else:
                                print('\033[91mVoc√™ perdeu!\033[m')
                                
                            funcoes.continuar_def('Quer jogar novamente')

                            if funcoes.continuar == 'N':
                                sleep(0.6)
                                break
                            else:
                                funcoes.linha('azul', '40')


                    funcoes.sair_secao('par ou √≠mpar', 'roxo')
                    break

            elif funcoes.escolha_usuario == 4: # PAL√çNDROMO
                funcoes.titulo('Pal√≠ndromo', 'JOGO DE PAL√çNDROMO', 'azul')

                while True:
                    funcoes.menu('Iniciar jogo', 'Sair da se√ß√£o de pal√≠ndromo')

                    funcoes.escolha_user('Qual sua op√ß√£o?', 2)

                    if funcoes.escolha_usuario == 1:
                        while True:
                            frase = str(input('\033[mDigite uma frase:\033[92m ')).upper().replace(' ', '')
                            inverso = frase[::-1]
                            print(f'\033[mO inverso de \033[94m{frase}\033[m √© \033[94m{inverso}\033[m')
                            if frase == inverso:
                                print('\nA frase digitada \033[95m√â UM PAL√çNDROMO\033[m')
                            else:
                                print('\nA frase digitada \033[95mN√ÉO √â UM PAL√çNDROMO\033[m')
                            
                            funcoes.continuar_def('Vamos continuar')
                                
                            if funcoes.continuar == 'N':
                                sleep(0.6)
                                break
                            else:
                                funcoes.linha('azul')

                    funcoes.sair_secao('pal√≠ndromo', 'roxo')
                    break

            else:
                funcoes.sair_secao('jogos', 'amarelo')
                break

    elif funcoes.escolha_usuario == 2:  # SE√á√ÉO DE MATEM√ÅTICA
        funcoes.titulo('se√ß√£o de matem√°tica', 'SE√á√ÉO DE MATEM√ÅTICA', 'roxo')

        while True:
            funcoes.menu('Opera√ß√µes Matem√°ticas', 'calcular m√©dia', 'Par ou √çmpar',
                         'Tabuada', 'Sequ√™ncia de Fibonacci', 'Progress√£o Aritm√©tica',
                         'Fatorial', '√çndice de Massa Corporal', 'An√°lise de Tri√¢ngulos',
                         'Seno, Cosseno e Tangente', 'Hipotenusa', 'Sair da se√ß√£o de matem√°tica')
            
            funcoes.escolha_user('Qual sua op√ß√£o?', 12)

            if funcoes.escolha_usuario == 1:      # OPERA√á√ïES MATEM√ÅTICAS
                funcoes.titulo('Opera√ß√µes Matem√°ticas', 'SE√á√ÉO DE OPERA√á√ïES MATEM√ÅTICAS', 'azul')

                while True:
                    funcoes.menu('Soma', 'Subtra√ß√£o', 'Multiplica√ß√£o',
                                 'Divis√£o', 'Sair da se√ß√£o de operadores matem√°ticos')

                    funcoes.escolha_user('Qual sua op√ß√£o?', 5)

                    if funcoes.escolha_usuario == 1:    # Soma
                        funcoes.titulo('Soma', 'SE√á√ÉO DE SOMA', 'cinza')

                        cont = tot_zero_soma = 0
                        numeros = []

                        while True:
                            funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de soma')
                            
                            funcoes.escolha_user('Qual sua op√ß√£o?', 2)
                            print('')

                            if funcoes.escolha_usuario == 1:
                                operacoes_mat.soma()

                            funcoes.sair_secao('soma', 'azul')
                            break

                    elif funcoes.escolha_usuario == 2:  # Subtra√ß√£o
                        funcoes.titulo('Subtra√ß√£o', 'SE√á√ÉO DE SUBTRA√á√ÉO', 'cinza')

                        while True:
                            funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de subtra√ß√£o')
                            
                            funcoes.escolha_user('Qual sua op√ß√£o?', 2)
                            
                            if funcoes.escolha_usuario == 1:
                                while True:
                                    operacoes_mat.subtracao()

                                    funcoes.continuar_def('Quer continuar', True)
                                        
                                    if funcoes.continuar == 'N':
                                        sleep(0.7)
                                        break
                                    else:
                                        funcoes.linha('azul', '50')
                                        
                            funcoes.sair_secao('subtra√ß√£o', 'azul')
                            break

                    elif funcoes.escolha_usuario == 3:  # Multiplica√ß√£o
                        funcoes.titulo('Multiplica√ß√£o', 'SE√á√ÉO DE MULTIPLIACA√á√ÉO', 'cinza')

                        while True:
                            funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de multiplica√ß√£o')
                             
                            funcoes.escolha_user('Qual sua op√ß√£o?', 2)
                            
                            if funcoes.escolha_usuario == 1:
                                while True:
                                    operacoes_mat.multiplicacao()

                                    funcoes.continuar_def('Quer continuar', True)
                                        
                                    if funcoes.continuar == 'N':
                                        sleep(0.7)
                                        break
                                    else:
                                        funcoes.linha('azul', '50')

                            funcoes.sair_secao('multiplica√ß√£o', 'azul')
                            break

                    elif funcoes.escolha_usuario == 4:  # Divis√£o
                        funcoes.titulo('Divis√£o', 'SE√á√ÉO DE DIVIS√ÉO' 'cinza')

                        while True:
                            funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de divis√£o')

                            funcoes.escolha_user('Qual sua op√ß√£o?', 2)
                            
                            if funcoes.escolha_usuario == 1:
                                while True:
                                    operacoes_mat.divisao()

                                    funcoes.continuar_def('Quer continuar', True)
                                    
                                    if funcoes.continuar == 'N':
                                        sleep(0.7)
                                        break
                                    else:
                                        funcoes.linha('azul', '50')

                            funcoes.sair_secao('divis√£o', 'azul')
                            break

                    else:
                        funcoes.sair_secao('opera√ß√µes matem√°ricas', 'roxo')
                        break

            elif funcoes.escolha_usuario == 2:    # CALCULAR M√âDIA
                funcoes.titulo('Calcular m√©dia', 'SE√á√ÉO DE CALCULAR M√âDIA', 'azul')

                while True:
                    funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de calcular m√©dia')
                        
                    funcoes.escolha_user('Qual sua op√ß√£o?', 2)

                    if funcoes.escolha_usuario == 1:
                        while True:
                                lista = []
                                usuarios = []
                                aprovados = []
                                reprovados = []

                                while True:
                                    usuarios.append(str(input('\n\033[mNome:\033[92m ')).strip().title().replace("Da", "da").replace("De", 'de').replace("Dos", "dos").replace("Das", "das"))
                                    nota01 = funcoes.verificar_num('\033[mNota 1:\033[92m ', 10)
                                    usuarios.append(nota01)
                                    nota02 = funcoes.verificar_num('\033[mNota 2:\033[92m ', 10)
                                    usuarios.append(nota02)

                                    lista.append(usuarios[:])
                                    usuarios.clear()

                                    print()
                                    funcoes.continuar_def('\033[94mQuer continuar')
                                    
                                    if funcoes.continuar == 'N':
                                        break

                                print(f'\n\033[1m{"No.":<3} {"NOME":<15} {"M√âDIA":<9} {"RESULTADO":<0}\033[m')
                                funcoes.linha('azul', '39')
                                for i, c in enumerate(lista):
                                    if ((c[1] + c[2]) / 2) < 6:
                                        reprovados.append(c[0])
                                        print(f'{i:<3} \033[3m{c[0]:<15}\033[m \033[91m{((c[1] + c[2]) / 2):<9}\033[m \033[1m{"[Reprovado]":<0}\033[m'.replace('.', ','))
                                    else:
                                        aprovados.append(c[0])
                                        print(f'{i:<3} \033[3m{c[0]:<15}\033[m \033[94m{((c[1] + c[2]) / 2):<9}\033[m \033[1m{"[Aprovado]":<0}\033[m'.replace('.', ','))
                                funcoes.linha('azul', '39')

                                if len(aprovados) == 0:
                                    print('N√£o ouve nenhum aluno aprovado!')
                                else:
                                    print('\033[mOs alunos aprovados foram:')
                                    for c in aprovados:
                                        print(f'\033[94m{c}\033[m')

                                print()

                                if len(reprovados) == 0:
                                    print('N√£o ouve nenhum aluno reprovado!')
                                else:
                                    print('E os reprovados:')
                                    for c in reprovados:
                                        print(f'\033[91m{c}\033[m')

                                funcoes.linha('azul', '36')
                                
                                funcoes.continuar_def('Quer ver as notas de algum aluno')
                                    
                                if funcoes.continuar == 'S':
                                    while True:
                                        aluno = funcoes.verificar_num('\n\033[mQuer mostrar as notas de qual aluno? [999 interromper]:\033[92m ', forcar_valor_int=True)
                                        if aluno == 999:
                                                break
                                        else:
                                            print(f'\033[mAs notas de \033[3m{lista[aluno][0]}\033[m s√£o {lista[aluno][1]} e {lista[aluno][2]}'.replace('.', ','))
                                funcoes.linha('azul', '36')
                                break

                    else:
                        funcoes.sair_secao('calcular m√©dia', 'roxo')
                        break

            elif funcoes.escolha_usuario == 3:    # PAR OU √çMPAR
                funcoes.titulo('Par ou √çmpar', 'SE√á√ÉO DE PAR OU √çMPAR', 'azul')

                while True:
                    funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de par ou √≠mpar')
                    
                    funcoes.escolha_user('Qual sua op√ß√£o?', 2)

                    if funcoes.escolha_usuario == 1:
                        while True:
                            num = funcoes.verificar_num('\n\033[mMe diga um n√∫mero qualquer:\033[92m ')
                            
                            if num % 2 == 0:
                                print(f'\033[m O n√∫mero {num} √© \033[3;94mPAR\033[m')
                            else:
                                print(f'\033[m O n√∫mero {num} √© \033[3;94m√çmpar\033[m')

                            funcoes.continuar_def('Quer continar', True)
                                
                            if funcoes.continuar == 'N':
                                funcoes.linha('azul')
                                break
                           
                    else:        
                        funcoes.sair_secao('par ou √≠mpar', 'roxo')
                        break

            elif funcoes.escolha_usuario == 4:    # TABUADA
                funcoes.titulo('Tabuada', 'SE√á√ÉO DE TABUADA', 'azul')

                while True:
                    funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de tabuada')
                        
                    funcoes.escolha_user('Qual sua op√ß√£o?', 2)

                    if funcoes.escolha_usuario == 1:
                        while True:
                            num = funcoes.verificar_num('\033[mDigite um n√∫mero para a tabuada [0 -> parar]:\033[92m ', sem_num_min=True, forcar_valor_int=True)
                            if num == 0:
                                funcoes.continuar_def('\033[mDeseja realmente finalizar o programa')
                                
                                if funcoes.continuar == 'S':
                                    break
                                else:
                                    funcoes.linha('azul', '40')

                            else:
                                print('')
                                for c in range(1, 11):
                                    print(f'\033[m{num} x {c} = \033[94m{num * c}\033[m')
                                print('')
                                funcoes.linha('azul', '40')

                    funcoes.sair_secao('tabuada', 'roxo')
                    break

            elif funcoes.escolha_usuario == 5:    # SEQU√äNCIA DE FIBONACCI
                funcoes.titulo('Sequ√™ncia de Fibonacci', 'SE√á√ÉO DE SEQU√äNCIA DE FIBONACCI', 'azul')

                while True:
                    funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de Fibonacci')
                        
                    funcoes.escolha_user('Qual sua op√ß√£o?', 2)

                    if funcoes.escolha_usuario == 1:
                        num = funcoes.verificar_num('\033[mQuantos termos voc√™ quer mostrar?\033[92m ', forcar_valor_int=True)
                        num -= 2
                        funcoes.linha('verde')
                        t1 = 0
                        t2 = 1
                        print(f'0 \033[92m->\033[m 1 \033[92m->\033[m ', end="")
                        while True:
                            cont = 0
                            while cont != num:
                                t3 = t1 + t2
                                print(t3, end=' \033[92m->\033[m ')
                                t1 = t2
                                t2 = t3
                                cont += 1
                            print('\033[3;92mFIM\033[m')
                            funcoes.linha('verde')
                            
                            funcoes.continuar_def('Quer ver mais')
                                
                            if funcoes.continuar == 'N':
                                break
                            else:
                                num = funcoes.verificar_num('\033[mQuantos termos voc√™ quer ver a mais?\033[92m ', forcar_valor_int=True)
                                funcoes.linha('verde')
                            
                    funcoes.sair_secao('sequ√™ncia de Fibonacci', 'roxo')
                    break

            elif funcoes.escolha_usuario == 6:    # PROGRESS√ÉO ARITM√âTICA
                funcoes.titulo('Prograss√£o Aritm√©tica', 'SE√á√ÉO DE PROGRES√ÉO ARITM√âTICA', 'azul')

                while True:
                    funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de progress√£o aritm√©tica')
                        
                    funcoes.escolha_user('Qual sua op√ß√£o?', 2)

                    if funcoes.escolha_usuario == 1:
                        termo = funcoes.verificar_num('\n\033[mPrimeiro termo:\033[32m ', sem_num_min=True, forcar_valor_int=True)
                        razao = funcoes.verificar_num('\033[mRaz√£o de PA:\033[32m ', forcar_valor_int=True)
                        cont = 0
                        cont_termos = 0
                        quantidade = 10
                        while True:
                            funcoes.linha('verde')
                            for cont in range(termo, (termo + (quantidade * razao)), razao):
                                print(f'\033[m{termo}', end=' \033[92m->\033[m ')
                                termo += razao
                                cont += 1
                            print('\033[3;92mFIM\033[m')
                            funcoes.linha('verde')
                            
                            funcoes.continuar_def('Quer ver mais')
                            
                            if funcoes.continuar == 'N':
                                break
                            
                            quantidade = funcoes.verificar_num('\n\033[mQuantos termos voc√™ quer mostrar a mais?\033[92m ', forcar_valor_int=True)
                            cont_termos += 1

                    funcoes.sair_secao('progress√£o aritm√©tica', 'roxo')
                    break

            elif funcoes.escolha_usuario == 7:    # FATORIAL
                funcoes.titulo('Fatorial', 'SE√á√ÉO DE FATORIAL', 'azul')

                while True:
                    funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de fatorial')
                        
                    funcoes.escolha_user('Qual sua op√ß√£o?', 2)
                    
                    if funcoes.escolha_usuario == 1:
                        while True:
                            num = funcoes.verificar_num('\n\033[mDigite um n√∫mero para seu Fatorial:\033[92m ', forcar_valor_int=True)
                            funcoes.linha('verde', '50')
                            print(f'\033[mCalculando \033[94m{num}!\033[m = ', end=' ')
                            for c in range(num, 0, -1):
                                if c == 1:
                                    print(c, end=' = ')
                                else:
                                    print(f'{c} x', end=' ')
                            print(f'\033[94m{factorial(num)}\033[m')
                            funcoes.linha('verde', '50')

                            funcoes.continuar_def('Quer ver mais')

                            if funcoes.continuar == 'N':
                                break

                    funcoes.sair_secao('fatorial', 'roxo')
                    break

            elif funcoes.escolha_usuario == 8:    # IMC
                funcoes.titulo('√çndice de Massa Corporal', 'SE√á√ÉO DE IMC', 'roxo')

                while True:
                    funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de IMC')

                    funcoes.escolha_user('Qual sua op√ß√£o?', 2)
                    
                    if funcoes.escolha_usuario == 1:
                        try:
                            urllib.request.urlopen('https://pedrosinsenp.github.io/calculadora-imc/')
                        except:
                            usuario = 2
                        else:
                            funcoes.linha('azul')
                            funcoes.menu('Site', 'Programa')
                            usuario = funcoes.verificar_num('Deseja acessar o site ou ir pelo programa?\033[92m ', 2)
                        while True:
                            if usuario == 1:
                                try:
                                    urllib.request.urlopen('https://pedrosinsenp.github.io/calculadora-imc/')
                                except:
                                    print('\033[91mOcorreu algum erro ao acessar o site\033[m')
                                    usuario = 2
                                    continue
                                else:
                                    open('https://pedrosinsenp.github.io/calculadora-imc/')
                                    break
                            else:
                                peso = funcoes.verificar_num('\n\033[mQual seu peso?\033[92m ')
                                altura = funcoes.verificar_num('\033[mQual sua altura?\033[92m ')
                                if altura > 100:
                                    altura /= 100
                                imc = peso / (altura ** 2)

                                if imc <= 18.5:
                                    print(f'\n\033[mSeu IMC √© \033[3;94m{(imc):.1f}\033[m'.replace('.' , ','))
                                    print('Voc√™ est√° \033[91mABAIXO DO PESO!\033[m')
                                elif imc < 25:
                                    print(f'\n\033[mSeu IMC √© \033[3;94m{(imc):.1f}\033[m'.replace('.' , ','))
                                    print('Voc√™ est√° no \033[94mPESO IDEAL\033[m (parab√©ns)')
                                elif imc < 30:
                                    print(f'\n\033[mSeu IMC √© \033[3;94m{(imc):.1f}\033[m'.replace('.' , ','))
                                    print('Voc√™ est√° \033[91mACIMA DO PESO\033[m')
                                elif imc < 35:
                                    print(f'\n\033[mSeu IMC √© \033[3;94m{(imc):.1f}\033[m'.replace('.' , ','))
                                    print('Voc√™ est√° em \033[91mOBESIDADE GRAU I!\033[m')
                                elif imc < 40:
                                    print(f'\n\033[mSeu IMC √© \033[3;94m{(imc):.1f}\033[m'.replace('.' , ','))
                                    print('Voc√™ est√° em \033[91mOBESIDADE GRAU II!\033[m (severa)')
                                elif imc >= 40:
                                    print(f'\n\033[mSeu IMC √© \033[3;94m{(imc):.1f}\033[m'.replace('.' , ','))
                                    print('Voc√™ est√° \033[3;91mOBESIDADE GRAU III!\033[m (m√≥rbida)')
                                else:
                                    print('\n\033[91mErro!\033[m Verifique sua credenciais!')

                                funcoes.continuar_def('Quer ver mais', True)
                                    
                                if funcoes.continuar == 'N':
                                    break
                                else:
                                    funcoes.linha('azul', '50')

                    funcoes.sair_secao('IMC', 'roxo')
                    break

            elif funcoes.escolha_usuario == 9:    # SE√á√ÉO DE AN√ÅLISE DE TRIN√ÇNGULOS
                funcoes.titulo('An√°lose de Tri√¢ngulos', 'SE√á√ÉO DE AN√ÅLISE DE TRI√ÇNGULOS', 'azul')

                while True:
                    funcoes.menu('An√°lise de Tri√¢ngulos v1.0', 'An√°lise de Tri√¢ngulos v2.0', 'Sair da se√ß√£o de an√°lise de tri√¢ngulos')

                    funcoes.escolha_user('Qual sua op√ß√£o?', 3)
                    
                    if funcoes.escolha_usuario == 1:      # An√°lise de Tri√¢ngulos v1.0
                        while True:
                            s1 = funcoes.verificar_num('\n\033[mPrimeiro segmento:\033[92m ')
                            s2 = funcoes.verificar_num('\033[mSegundo segmento:\033[92m ')
                            s3 = funcoes.verificar_num('\033[mTerceiro segmento:\033[92m ')
                            if s1 + s2 > s3 and s2 + s3 > s1 and s3 + s1 > s2:
                                print('\n\033[mOs segmentos acima \033[3;94mPODEM FORMAR tri√¢ngulo!\033[m')
                            else:
                                print('\n\033[mOs segmentos acima \033[3;91mN√ÉO PODEM FORMAR tri√¢ngulo!\033[m')

                            funcoes.continuar_def('Quer an√°lisar mais algum')
                            funcoes.linha('azul', '50')
                            
                            if funcoes.continuar == 'N':
                                break

                    elif funcoes.escolha_usuario == 2:     # An√°lise de Tri√¢ngulos v2.0
                        while True:
                            s1 = funcoes.verificar_num('\n\033[mPrimeiro segmento:\033[92m ')
                            s2 = funcoes.verificar_num('\033[mSegundo segmento:\033[92m ')
                            s3 = funcoes.verificar_num('\033[mTerceiro segmento:\033[92m ')
                            
                            if s1 == s2 and s2 == s3 and s1 == s3:
                                print('\n\033[mOs segmentos acima podem formar um\033[3;94m TRI√ÇNGULO EQUIL√ÅTERO (todos os lados iguais)\033[m')
                            elif s1 == s2 and s1 != s3 or s2 == s3 and s2 != s1 or s3 == s1 and s3 != s2:
                                print('\n\033[mOs segmentos acima podem formar um\033[Ã£3;94m TRI√ÇNGULO IS√ìCELES (dois lados iguais)\033[m')
                            elif s1 != s2 and s1 != s3 or s2 != s3 or s3 != s1:
                                print('\n\033[mOs segmentos acima podem formar um\033[3;94m TRI√ÇNGULO ESCALENO (todos os lados difetentes)\033[m')
                            
                            funcoes.continuar_def('Quer an√°lisar mais algum')
                            funcoes.linha('azul', '50')
                            
                            if funcoes.continuar == 'N':
                                break

                    else:
                        funcoes.sair_secao('an√°lise de tri√¢ngulos', 'roxo')
                        break

            elif funcoes.escolha_usuario == 10:   # SE√á√ÉO DE SENO, COSSENO E TANGENTE
                funcoes.titulo('Seno, Cosseno e Tangente', 'SE√á√ÉO DE SENO, COSSENO E TANGENTE', 'azul')

                while True:
                    angulo = funcoes.verificar_num('\033[mDigite o √¢ngulo que voc√™ deseja calcular:\033[92m ')

                    funcoes.menu('Seno', 'Cosseno', 'Tangente', 'Sair da se√ß√£o de seno, cosseno e tangente')
                        
                    funcoes.escolha_user('Qual sua op√ß√£o?', 4)
                    
                    if funcoes.escolha_usuario == 1:  # Seno
                        print(f'\033[mO √¢ngulo de \033[94m{angulo}¬∞\033[m tem o SENO de \033[3;94m{(sin(radians(angulo))):.2f}\033[m')

                        funcoes.continuar_def('Quer calcular mais algum', True)
                        
                        if funcoes.continuar == 'N':
                            break
                        else:
                            funcoes.linha('azul', '50')
                            print('')

                    elif funcoes.escolha_usuario == 2:    # Cosseno
                        print(f'\033[mO √¢ngulo de \033[94m{angulo}¬∞\033[m tem o COSSENO de \033[3;94m{(cos(radians(angulo))):.2f}\033[m')
                        
                        funcoes.continuar_def('Quer calcular mais algum', True)
                            
                        if funcoes.continuar == 'N':
                            break
                        else:
                            funcoes.linha('azul', '50')
                            print('')

                    elif funcoes.escolha_usuario == 3:    # Tangente
                        print(f'\033[mO √¢ngulo de \033[94m{angulo}¬∞\033[m tem o TANGENTE de \033[3;94m{(tan(radians(angulo))):.2f}\033[m')
                        
                        funcoes.continuar_def('Quer calcular mais algum', True)
                            
                        if funcoes.continuar == 'N':
                            break
                        else:
                            funcoes.linha('azul', '50')
                            print('')
                            
                    else:
                        break
                    
                funcoes.sair_secao('seno, cosseno e tangente', 'roxo')

            elif funcoes.escolha_usuario == 11:   # SE√á√ÉO DE HIPOTENUSA
                funcoes.titulo('Hipotenusa', 'SE√á√ÉO DE HIPOTENUSA', 'azul')

                funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de hipotenusa')

                funcoes.escolha_user('Qual sua op√ß√£o?', 2)
            
                if funcoes.escolha_usuario == 1:
                    while True:
                        co = funcoes.verificar_num('\n\033[mComprimento do cateto oposto:\033[92m ')
                        ca = funcoes.verificar_num('\033[mComprimento do cateto adjacente:\033[92m ')

                        print('')
                        funcoes.linha('azul', '50')
                        print(f'\033[mA hipotenusa vai medir \033[3;94m{(hypot(co, ca)):.2f}\033[m')
                        funcoes.linha('azul', '50')

                        funcoes.continuar_def('Quer calcular mais algum', True)
                        
                        if funcoes.continuar == 'N':
                            break
                        else:
                            funcoes.linha('azul', '50')
                        
                funcoes.sair_secao('hipotenusa', 'roxo')

            else:
                funcoes.sair_secao('matem√°tica', 'amarelo')
                break

    elif funcoes.escolha_usuario == 3:  # SE√á√ÉO DE GERADORES
        funcoes.titulo('Se√ß√£o de Geradores', 'SE√á√ÉO DE GERADORES', 'roxo')

        while True:
            funcoes.menu('Gerador de valores', 'Gerador de senhas',
                         'Gerador de nomes', 'Gerar palpites para Mega Sena',
                         'sair da se√ß√£o de geradores')
            
            funcoes.escolha_user('Qual sua op√ß√£o?', 5)

            if funcoes.escolha_usuario == 1:      # GERADOR DE VALORES
                funcoes.titulo('Gerador de valores', 'SE√á√ÉO DE GERADOR DE VALORES', 'azul')

                while True:
                    funcoes.menu('N√∫meros at√© 10', 'N√∫meros at√© 100', 'N√∫meros at√© 200',
                                 'Personalizar', 'Sair da se√ß√£o de gerador de valores')
                    
                    funcoes.escolha_user('Qual sua op√ß√£o?', 5)

                    if funcoes.escolha_usuario != 5:
                        quant_valores_usuario = funcoes.verificar_num('\033[mQuantos valores v√£o ser gerados?\033[92m ', forcar_valor_int=True)

                    if funcoes.escolha_usuario == 1:      # <= 10
                        print(f'\n\033[mOs valores gerados foram:', end=' ')

                        for c in range(0, quant_valores_usuario):
                            num = randint(0, 10)
                            if quant_valores_usuario > 1:
                                if c == quant_valores_usuario - 1:
                                    print(f'\033[3;94m{num}\033[m')
                                else:
                                    print(f'\033[3;94m{num}\033[m', end=' | ')
                            else:
                                print(f'{num}')

                        funcoes.continuar_def('Quer gerar mais algum valor')
                            
                        if funcoes.continuar == 'N':
                            break

                        funcoes.linha('azul', '50')
                        print('')

                    elif funcoes.escolha_usuario == 2:    # <= 100
                        print(f'\n\033[mOs valores gerados foram:', end=' ')

                        for c in range(0, quant_valores_usuario):
                            num = randint(0, 100)
                            if quant_valores_usuario > 1:
                                if c == quant_valores_usuario - 1:
                                    print(f'\033[3;94m{num}\033[m')
                                else:
                                    print(f'\033[3;94m{num}\033[m', end=' | ')
                            else:
                                print(f'{num}')
                                
                        funcoes.continuar_def('Quer gerar mais algum valor')
                            
                        if funcoes.continuar == 'N':
                            break

                        funcoes.linha('azul', '50')
                        print('')

                    elif funcoes.escolha_usuario == 3:    # <= 200
                        print(f'\n\033[mOs valores gerados foram:', end=' ')

                        for c in range(0, quant_valores_usuario):
                            num = randint(0, 200)
                            if quant_valores_usuario > 1:
                                if c == quant_valores_usuario - 1:
                                    print(f'\033[3;94m{num}\033[m')
                                else:
                                    print(f'\033[3;94m{num}\033[m', end=' | ') 
                            else:
                                print(f'{num}')

                        funcoes.continuar_def('Quer gerar mais algum valor')
                            
                        if funcoes.continuar == 'N':
                            break

                        funcoes.linha('azul', '50')
                        print('')

                    elif funcoes.escolha_usuario == 4:    # Personalizado
                        menor = funcoes.verificar_num('\033[mSeu valor vai come√ßar com qual n√∫mero?\033[92m ', forcar_valor_int=True)

                        maior = funcoes.verificar_num('\033[mE vai at√© que n√∫mero?\033[92m ', forcar_valor_int=True)

                        print(f'\n\033[mOs valores gerados foram:', end=' ')

                        for c in range(0, quant_valores_usuario):
                            num = randint(menor, maior)
                            if quant_valores_usuario > 1:
                                if c == quant_valores_usuario - 1:
                                    print(f'\033[3;94m{num}\033[m')
                                else:
                                    print(f'\033[3;94m{num}\033[m', end=' | ')
                            else:
                                print(f'{num}')

                        funcoes.continuar_def('Quer gerar mais algum valor')
                            
                        if funcoes.continuar == 'N':
                            break

                        funcoes.linha('azul', '50')
                        print('')
                        
                    else:
                        break
                    
                funcoes.sair_secao('gerador de valores', 'roxo')

            elif funcoes.escolha_usuario == 2:    # GERADOR DE SENHAS
                funcoes.titulo('Gerador de senhas', 'SE√á√ÉO DE GERADOR DE SENHAS', 'azul')

                while True:
                    funcoes.menu('Senha fraca', 'Senha m√©dia', 'Senha forte', 'Sair da se√ß√£o de gerador de senhas')
                        
                    funcoes.escolha_user('Qual sua op√ß√£o?', 4)

                    senha = ''
                    verificar_carac = 0
                    verificar_maiu = 0
                    verificar_minu = 0
                    verificar_num = 0
                    
                    if funcoes.escolha_usuario == 1:   # SENHA FRACA
                        senha_carac = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz'
                        tamanho_senha = funcoes.verificar_num('\033[mQual o tamanho da senha?\033[92m ', forcar_valor_int=True, senha=True)
                            
                        print('\033[3mGerando senha...\033[m')
                        sleep(1)

                        while True:
                            for c in range(0, tamanho_senha):
                                escolha = choice(senha_carac)
                                senha += escolha
                                if escolha.isupper():
                                    verificar_maiu = 1
                                if escolha.islower():
                                    verificar_minu = 1
                                    
                            if verificar_minu and verificar_maiu == 1:
                                break
                            else:
                                senha = ''
                                verificar_minu = 0
                                verificar_maiu = 0

                        print(f'\n\033[mA senha gerada foi \033[94m{senha}\033[m')

                        funcoes.continuar_def('Quer gerar mais alguma senha')
                            
                        if funcoes.continuar == 'N':
                            break

                        funcoes.linha('azul', '50')
                        print('')

                    elif funcoes.escolha_usuario == 2: # SENHA M√âDIA
                        senha_carac = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '1234567890'
                        tamanho_senha = funcoes.verificar_num('\033[mQual o tamanho da senha?\033[92m ', forcar_valor_int=True, senha=True)
                            
                        print('\033[3mGerando senha...\033[m')
                        sleep(0.9)

                        while True:
                            for c in range(0, tamanho_senha):
                                escolha = choice(senha_carac)
                                senha += escolha
                                if escolha.isnumeric():
                                    verificar_num = 1
                                if escolha.isupper():
                                    verificar_maiu = 1
                                if escolha.islower():
                                    verificar_minu = 1

                            if verificar_minu and verificar_maiu and verificar_num == 1:
                                break
                            else:
                                senha = ''
                                verificar_minu = 0
                                verificar_maiu = 0
                                verificar_num = 0

                        print(f'\n\033[mA senha gerada foi \033[94m{senha}\033[m')

                        funcoes.continuar_def('Quer gerar mais alguma senha')
                        
                        if funcoes.continuar == 'N':
                            break

                        funcoes.linha('azul', '50')
                        print('')
                    
                    elif funcoes.escolha_usuario == 3: # SENHA FORTE
                        senha_carac = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '1234567890' + '!#$&@'
                        tamanho_senha = funcoes.verificar_num('\033[mQual o tamanho da senha?\033[92m ', forcar_valor_int=True, senha=True)
                            
                        print('\033[3mGerando senha...\033[m')
                        sleep(0.9)

                        while True:
                            for c in range(0, tamanho_senha):
                                escolha = choice(senha_carac)
                                senha += escolha
                                if escolha.isnumeric():
                                    verificar_num = 1
                                if escolha.isupper():
                                    verificar_maiu = 1
                                if escolha.islower():
                                    verificar_minu = 1
                                if escolha in '!#$&@':
                                    verificar_carac = 1
                                    
                            if verificar_minu and verificar_carac and verificar_maiu and verificar_num == 1:
                                break
                            else:
                                senha = ''
                                verificar_carac = 0
                                verificar_minu = 0
                                verificar_maiu = 0
                                verificar_num = 0
                            
                        print(f'\n\033[mA senha gerada foi \033[94m{senha}\033[m')

                        funcoes.continuar_def('Quer gerar mais alguma senha')
                            
                        if funcoes.continuar == 'N':
                            break

                        funcoes.linha('azul', '50')
                        print('')
                        verificar_carac = 0
                        verificar_maiu = 0
                        verificar_minu = 0
                        verificar_num = 0
                        
                    else:
                        break                    
                    
                funcoes.sair_secao('gerador de senhas', 'roxo')

            elif funcoes.escolha_usuario == 3:    # GERADOR DE NOMES
                funcoes.titulo('Gerador de nomes', 'SE√á√ÉO DE GERADOR DE NOMES', 'azul')

                while True:
                    funcoes.menu('Nome masculino', 'Nome feminino', 'Sair da se√ß√£o de gerador de nomes')

                    funcoes.escolha_user('Qual sua op√ß√£o?', 3)

                    nomes_masculinos = ['Jo√£o', 'Lucas', 'Pedro', 'Mateus', 'Davi', 'Arthur', 'Bernardo', 'Heitor', 'Rafael', 'Miguel', 'Enzo', 'Ethan', 'Gabriel', 'Lucca', 'Benjamin', 'Nicolas', 'Guilherme', 'Gustavo', 'Murilo', 'Felipe', 'Samuel', 'Henrique', 'Lorenzo', 'Vinicius', 'Joaquim', 'Leonardo', 'Ryan', 'Ian', 'Ant√¥nio', 'Victor', 'Bruno', 'Carlos', 'Davi Lucas', 'Kaique', 'Patrick', 'Igor', 'Diego', 'Alexandre', 'Mateus Henrique', 'Gustavo Henrique', 'Gabriel', 'Luiz Miguel', 'Felipe', 'Lucas Gabriel', 'Pedro Henrique', 'Leonardo', 'Vinicius', 'Vicente', 'Eduardo', 'Fillipi', 'Paulo', 'Willian', 'Fernando', 'Jos√©', 'Wesley', 'Murilo']
                    
                    nomes_femininos = ['Helena', 'Alice', 'Laura', 'Manuela', 'Valentina', 'Sophia', 'Isabella', 'Helo√≠sa', 'Luiza', 'J√∫lia', 'Lorena', 'L√≠via', 'Maria', 'Luiza', 'Cec√≠lia', 'Giovanna', 'Maria Clara', 'Maria Eduarda', 'Mariana', 'Lara', 'Beatriz', 'Antonella', 'Maria J√∫lia', 'Emanuelly', 'Isadora', 'Ana', 'Clara', 'Melissa', 'Ana Luiza', 'Ana J√∫lia', 'Esther', 'Lav√≠nia', 'Mait√™', 'Maria Cec√≠lia', 'Maria Alice', 'Sarah', 'Elisa',' Liz', 'Yasmin', 'Isabelly', 'Al√≠cia', 'Clara', 'Isis', 'Rebeca', 'Rafaela', 'Marina', 'Ana Laura', 'Maria Helena', 'Agatha', 'Gabriela', 'Catarina', 'Let√≠cia', 'Mirella', 'Nicole', 'Luna', 'Maria Vit√≥ria', 'Ol√≠via', 'Vit√≥ria', 'Maria', 'Maria Fernanda', 'Ana Beatriz', 'Allana', 'Maria Valentina', 'Milena', 'Emilly', 'Ayla', 'Maria', 'Flor', 'Maya', 'Bianca', 'Clarice', 'Aurora', 'Larissa', 'Mariah', 'Pietra', 'La√≠s', 'Stella', 'Eduarda', 'Maria Helo√≠sa', 'Ana L√≠via', 'Ana Sophia', 'Maria', 'Laura', 'Carolina', 'Ana', 'Vit√≥ria', 'Malu', 'Gabrielly', 'Ana Liz', 'Analu', 'Maria Sophia', 'Ana Cec√≠lia', 'Amanda', 'Louise', 'Heloise', 'Fernanda', 'Ana', 'Melina', 'Maria Isis','Bella', 'Joana', 'Isabel', 'Melinda','P√©rola']

                    if funcoes.escolha_usuario == 1:    # Nome masculino
                        nome_escolhido = choice(nomes_masculinos)
                        print(f'\n\033[mO nome gerado foi \033[1;94m{nome_escolhido}\033[m')
                        funcoes.linha('roxo')
                        
                    elif funcoes.escolha_usuario == 2:  # nome Feminino
                        nome_escolhido = choice(nomes_femininos)
                        print(f'\n\033[mO nome gerado foi \033[1;94m{nome_escolhido}\033[m')
                        funcoes.linha('roxo')
                        
                    else:
                        funcoes.sair_secao('gerador de nomes', 'roxo')
                        break
                    
            elif funcoes.escolha_usuario == 4:    # GERADOR DE PALPITES PARA MEGA SENA
                funcoes.titulo('Gerador de palpites para Mega Sena', 'JOGO DA MEGA SENA', 'azul')
                lista = []
                valor = []

                while True:
                    palpites = funcoes.verificar_num('\n\033[mQuantos jogos voc√™ quer que eu sorteie?\033[92m ', forcar_valor_int=True)
                    print()

                    print(f'\033[3;94m{(f" SORTEANDO {palpites} JOGOS "):~^60}\033[m')
                    print()

                    for l in range(0, palpites):
                        for c in range(0, 6):
                            num = randint(1, 60)
                            if num not in valor:
                                valor.append(num)
                            else:
                                while num in valor:
                                    num = randint(1, 60)
                                valor.append(num)
                        lista.append(valor[:])
                        valor.clear()
                        
                    for pos, c in enumerate(lista):
                        print(f'Jogo {pos + 1}: \033[94m{c}\033[m')
                        
                    print()
                    print(f'\033[3;94m{(f" < BOA SORTE! > "):~^60}\033[m')
                    
                    funcoes.continuar_def('Quer gerar mais palpites')
                    
                    if funcoes.continuar == 'N':
                        funcoes.linha('roxo')
                        break

            else:
                funcoes.sair_secao('geradores', 'amarelo')
                break

    elif funcoes.escolha_usuario == 4:  # SE√á√ÉO DE SORTEAR
        funcoes.titulo('Se√ß√£o de sortear', 'SE√á√ÉO DE SORTEAR', 'roxo')

        while True:
            funcoes.menu('Sortear nomes', 'Embaralhar', 'Colocar em ordem alfab√©tica', 'Sair da se√ß√£o de sortear')
            
            funcoes.escolha_user('Qual sua op√ß√£o?', 4)
            
            if funcoes.escolha_usuario == 1:    # Sortear nomes
                funcoes.titulo('Sortear nomes', 'SE√á√ÉO DE SORTEAR NOMES', 'azul')

                while True:
                    funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de sortear nomes')

                    funcoes.escolha_user('Qual sua op√ß√£o?', 2)

                    if funcoes.escolha_usuario == 1:
                        lista = []
                        cont = 0
                        while True:
                            cont += 1
                            nomes = str(input(f'\n\033[m{cont}¬™ nome:\033[92m '.replace("Da", "da").replace("De", 'de').replace("Dos", "dos").replace("Das", "Das"))).title().strip()
                            while nomes.isalpha() == False:
                                nomes = str(input(f'\033[91mERRO! "{nomes}" n√£o √© v√°lido.\033[m {cont}¬™ nome:\033[92m '.replace("Da", "da").replace("De", 'de').replace("Dos", "dos").replace("Das", "Das"))).strip().title()
                                
                            nomes = lista.append(nomes)
                            
                            funcoes.continuar_def('\033[94mQuer continuar')
                                
                            if funcoes.continuar == 'N':
                                break
                        quant_sorteados = funcoes.verificar_num(f'\n\033[mDos {cont} nomes, quantos ser√£o sorteados?\033[92m ', (len(lista) - 1), forcar_valor_int=True)

                        if quant_sorteados == 1:
                            for c in range(0, quant_sorteados):
                                sorteado = choice(lista)
                            print(f'\033[mO nome sorteado foi...')
                            sleep(0.9)
                            print('\n\033[93m3')
                            sleep(0.9)
                            print('2')
                            sleep(0.9)
                            print('1\033[m')
                            sleep(0.9)
                            print(f'\n{sorteado}'.replace("'", "").replace('[', '').replace(']', '').replace("Da", "da").replace("De", 'de').replace("Dos", "dos").replace("Das", "Das"))
                            funcoes.linha('azul', '50')
                            
                        else:
                            sorteados = []
                            for c in range(0, quant_sorteados):
                                sort = choice(lista)
                                escolhidos = sorteados.append(sort)
                                lista.remove(sort)
                            print(f'\033[mOs nomes sorteados foram...')
                            sleep(0.9)
                            print('\n\033[94m3')
                            sleep(0.9)
                            print('2')
                            sleep(0.9)
                            print('1\033[m')
                            sleep(0.9)
                            print(f'\n{sorteados}'.replace("'", "").replace('[', '').replace(']', '').replace("Da", "da").replace("De", 'de').replace("Dos", "dos").replace("Das", "Das"))
                            funcoes.linha('azul', '50')

                    else:
                        funcoes.sair_secao('sortear nomes', 'roxo')
                        break

            elif funcoes.escolha_usuario == 2:  # Embaralhar
                funcoes.titulo('Embaralhar', 'SE√á√ÉO DE EMBARALHAR', 'azul')

                while True:
                    funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de embaralhar')
                    
                    funcoes.escolha_user('Qual sua op√ß√£o?', 2)

                    if funcoes.escolha_usuario == 1:
                        lista = []
                        cont = 0
                        while True:
                            cont += 1
                            individuo = str(input(f'\n\033[m{cont}¬™ indiv√≠duo:\033[92m '.replace("Da", "da").replace("De", 'de').replace("Dos", "dos").replace("Das", "Das"))).title().strip()
                            while individuo.isalpha() == False:
                                individuo = str(input(f'\033[91mERRO! "{individuo}" n√£o √© v√°lido.\033[m {cont}¬™ indiv√≠duo:\033[92m '.replace("Da", "da").replace("De", 'de').replace("Dos", "dos").replace("Das", "Das"))).strip().title()
                                
                            individuo = lista.append(individuo)
  
                            funcoes.continuar_def('Quer continuar')

                            if funcoes.continuar == 'N':
                                break
                        print(f'\033[3mEmbaralhando...\033[m')
                        sleep(0.9)
                        shuffle(lista)
                        cont = 0
                        for c in lista:
                            cont += 1
                            print(f'\033[3;94m{cont}¬∫\033[m {c}'.replace("Da", "da").replace("De", 'de').replace("Dos", "dos").replace("Das", "Das"))
                        funcoes.linha('azul', '50')

                    else:
                        funcoes.sair_secao('embaralhar', 'roxo')
                        break

            elif funcoes.escolha_usuario == 3:  # Ordem alfab√©tica
                funcoes.titulo('Ordem alfab√©tica', 'SE√á√ÉO DE ORDEM ALFAB√âTICA', 'azul')

                while True:
                    funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de ordem alfab√©tica')
                        
                    funcoes.escolha_user('Qual sua op√ß√£o?', 2)
                    
                    if funcoes.escolha_usuario == 1:
                        lista = []
                        cont = 0
                        while True:
                            cont += 1
                            individuo = str(input(f'\n\033[m{cont}¬™ indiv√≠duo:\033[92m '.replace("Da", "da").replace("De", 'de').replace("Dos", "dos").replace("Das", "Das"))).title().strip()
                            while individuo.isalpha() == False:
                                individuo = str(input(f'\033[91mERRO! "{individuo}" n√£o √© v√°lido.\033[m {cont}¬™ indiv√≠duo:\033[92m '.replace("Da", "da").replace("De", 'de').replace("Dos", "dos").replace("Das", "Das"))).strip().title()
                                
                            individuo = lista.append(individuo)
                            
                            funcoes.continuar_def('Quer continuar')
                                
                            if funcoes.continuar == 'N':
                                break
                        print(f'\033[3mOrdenando...\033[m')
                        print('')
                        sleep(0.9)
                        lista = sorted(lista)
                        cont_list = 0
                        for c in lista:
                            cont_list += 1
                            print(f'\033[94m{cont_list}¬∫\033[m \033[3m{c}\033[m'.replace("Da", "da").replace("De", 'de').replace("Dos", "dos").replace("Das", "Das"))
                        print('')
                        funcoes.linha('azul', '50')

                    else:
                        funcoes.sair_secao('ordem alfab√©tica', 'roxo')
                        break

            else:
                funcoes.sair_secao('sortear', 'amarelo')
                break

    elif funcoes.escolha_usuario == 5:  # SE√á√ÉO DO BRASILEIR√ÉO
        funcoes.titulo('Se√ß√£o do brasileir√£o', 'TABELA BRASILEIR√ÉO | desatualizada', 'roxo')

        cont = cont2 = cont4 = 0
        cont3 = 21
        tabela = [{'Botafofo':'\033[91m'}, {'Bragantino':'\033[90m'}, {'Flamengo':'\033[91m'}, {'Gr√™mio':'\033[94m'},  {'Palmeiras':'\033[92m'},
                {'Athletico-PR':'\033[91m'}, {'Athletico-MG':'\033[90m'}, {'Fortaleza':'\033[94m'}, {'Fluminense':'\033[92m'},
                {'Cuiab√°':'\033[92m'}, {'S√¢o Paulo':'\033[91m'}, {'Internacional':'\033[91m'}, {'Corinthians':'\033[90m'}, {'Bahia':'\033[94m'},
                {'Cruzeiro':'\033[94m'}, {'Vasco':'\033[91m'}, {'Santos':'\033[90m'}, {'Goi√°s':'\033[92m'}, {'Coritiba':'\033[92m'}, {'Am√©rica-MG':'\033[92m'}]

        while True:
            funcoes.menu('Tabela', 'Ranking dos top 5', 'Ranking dos √∫ltimos',
                         'Tabela em ordem alfab√©tica', 'Procurar time', 'Sair da se√ß√£o do brasileir√£o')

            funcoes.escolha_user('Qual sua op√ß√£o?', 6)

            if funcoes.escolha_usuario == 1:    # Tabela
                funcoes.titulo(msg='TABELA', cor='amarelo', sem_iniciar_secao=True)
                for c in tabela:
                    for i in c:
                        cont += 1
                        print(f'\033[94m{cont}.\033[m \033[3m{i}\033[m')
                        sleep(0.4)
                funcoes.linha('amarelo')
                sleep(0.7)

            elif funcoes.escolha_usuario == 2:  # Top 5
                funcoes.titulo(msg='TOP 5', cor='amarelo', sem_iniciar_secao=True)
                for c in tabela[:5]:
                    for i in c:
                        cont2 += 1
                        print(f'\033[94m{cont2}.\033[m \033[3m{i}\033[m')
                        sleep(0.6)
                funcoes.linha('amarelo')
                sleep(0.7)

            elif funcoes.escolha_usuario == 3:  # 4 √∫ltimos
                funcoes.titulo(msg='5 √öLTIMOS', cor='amarelo', sem_iniciar_secao=True)
                num = len(tabela)
                for c in tabela[-5:]:
                    for i in c:
                        cont3 -= 1
                        print(f'\033[94m{cont3}.\033[m \033[3m{i}\033[m')
                        sleep(0.6)
                funcoes.linha('amarelo')
                sleep(0.7)

            elif funcoes.escolha_usuario == 4:  # Ordem alfab√©tica
                funcoes.titulo(msg='ORDEM ALFAB√âTICA', cor='amarelo', sem_iniciar_secao=True)
                for c in sorted(tabela):
                    for i in c:
                        cont4 += 1
                        print(f'\033[94m{cont4}.\033[m \033[3m{i}\033[m')
                        sleep(0.4)
                funcoes.linha('amarelo')
                sleep(0.7)

            elif funcoes.escolha_usuario == 5:  # Procurar time
                lista = []
                for p, c in enumerate(tabela):
                    for i in c:
                        lista.append(i)
                funcoes.linha('amarelo')
                time = str(input('\033[mQue time deseja procurar?\033[92m ')).strip().title()
                
                    # Times com acentos
                if time == 'Botafogo':
                    time = 'Botafofo'
                if time == 'Athletico-pr':
                    time = 'Athletico-PR'
                if time == 'Cuiaba':
                    time = 'Cuiab√°'
                if time == 'Gremio':
                    time = 'Gr√™mio'
                if time == 'Sao Paulo':
                    time = 'S√£o Paulo'
                if time == 'Goias':
                    time = 'Goi√°s'
                if time == 'Athletico-mg':
                    time = 'Athletico-MG'
                if time == 'America-MG':
                    time = 'Am√©rica-MG'
                
                    # Decidir cor
                if time in lista:
                    for p, c in enumerate(tabela):
                        for i in c:
                            if time == i:
                                print(f'\n\033[mO time \033[3m{c[i]}{i}\033[m est√° na {p + 1}¬™ posi√ß√£o')
                                funcoes.linha('amarelo')
                                sleep(0.7)
                else:
                    print('\033[91mDesculpe! Time n√£o encontrado\033[m')
                    funcoes.linha('amarelo')
                    sleep(0.7)

            else:
                funcoes.sair_secao('brasileir√£o', 'amarelo')
                break

    elif funcoes.escolha_usuario == 6:  # SE√á√ÉO DE ALISTAMENTO
                funcoes.titulo('Alistamento', 'SE√á√ÉO DE ALISTAMENTO', 'roxo')

                while True:
                    funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de alistamento')
                        
                    funcoes.escolha_user('Qual sua op√ß√£o?', 2)

                    if funcoes.escolha_usuario == 1:
                        ano_atual = date.today().year
                        ano = funcoes.verificar_num('\n\033[mAno de nascimento:\033[92m ', ano_atual, forcar_valor_int=True)
                        idade = ano_atual - ano
                        print(f'\033[mQuem nasceu em {ano} tem \033[94m{idade}\033[m anos em {ano_atual}.')
                        if idade < 18:
                            print(f'Ainda faltam \033[94m{18 - idade}\033[m anos para seu alistamento')
                            print(f'Seu alistamento ser√° em \033[94m{ano_atual + (18 - idade)}\033[m')
                        elif idade > 18:
                            print(f'Voc√™ j√° deveria ter se alistado h√° \033[91m{(idade - 18)}\033[m anos.')
                            print(f'Seu alistamento foi em \033[91m{ano_atual - (idade - 18)}\033[m.')
                        else:
                            print('Voc√™ tem que se alistar \033[91mIMEDIATAMENTE!')
                        funcoes.linha('azul', '50')

                    else:
                        funcoes.sair_secao('alistamento', 'amarelo')
                        break

    elif funcoes.escolha_usuario == 7:  # SE√á√ÉO DE CAIXA ELETR√îNICO
                funcoes.titulo('Caixa eletr√¥nico', 'CAIXA ELETR√îNICO', 'roxo')

                while True:
                    funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de caixa eletr√¥nico')
                        
                    funcoes.escolha_user('Qual sua op√ß√£o?', 2)

                    if funcoes.escolha_usuario == 1:
                        cont_senha = n50 = n20 = n10 = n1 = saldo_usuario = tot_depositado = tot_saque = 0

                        senha = funcoes.verificar_num('\033[mBem vindo! Digite a senha do cart√£o [1000]:\033[92m ', sem_num_min=True, forcar_valor_int=True)
                        while senha != 1000:
                            cont_senha += 1
                            if cont_senha == 1:
                                senha = funcoes.verificar_num('\033[91mSenha inv√°lida! (1 de 3 tentativas)\033[m Digite a senha do cart√£o:\033[92m ', sem_num_min=True, forcar_valor_int=True)
                            elif cont_senha == 2:
                                senha = funcoes.verificar_num('\033[91mSenha inv√°lida! (2 de 3 tentativas)\033[m Digite a senha do cart√£o:\033[92m ', sem_num_min=True, forcar_valor_int=True)
                            elif cont_senha == 3:
                                senha = funcoes.verificar_num('\033[91mSenha inv√°lida! (3 de 3 tentativas)\033[m Digite a senha do cart√£o:\033[92m ', sem_num_min=True, forcar_valor_int=True)
                            else:
                                print('\033[91mTentativas esgotadas!\033[m aguarde 10 segundos e tente novamente.')
                                sleep(10)
                                senha = funcoes.verificar_num('Bem vindo! Digite a senha do cart√£o:\033[92m ', sem_num_min=True ,forcar_valor_int=True)
                        print('\033[94mAcesso liberado!\033[m')

                        while True:
                            funcoes.menu('Saque', 'Dep√≥sito', 'Saldo', 'Sair')

                            funcoes.escolha_user('\nQual sua opera√ß√£o?', 4)
                            funcoes.linha('roxo', '10')

                            if funcoes.escolha_usuario == 1:
                                saque = funcoes.verificar_num('\033[mDigite o valor que deseja sacar: R$\033[92m ', forcar_valor_int=True)
                                if saldo_usuario < saque:
                                        print('\033[91mSaldo insuficiente!\033[m')
                                        sleep(0.6)
                                else:
                                    tot_saque += saque
                                    saldo_usuario -= saque
                                    while True:
                                            if saque >= 50:
                                                saque -= 50
                                                n50 += 1
                                            else:
                                                if saque >= 20:
                                                    saque -= 20
                                                    n20 += 1
                                                else:
                                                    if saque >= 10:
                                                        saque -= 10
                                                        n10 += 1
                                                    else:
                                                        if saque >= 1:
                                                            saque -= 1
                                                            n1 += 1
                                            if saque == 0:
                                                print('Contando notas...')
                                                sleep(0.9)
                                                if n50 > 0:
                                                    if n50 > 1:
                                                        print(f'\033[mVoc√™ sacou {n50} notas de R$ \033[94m50\033[m')
                                                    else:
                                                        print(f'\033[mVoc√™ sacou 1 nota de R$ \033[94m50\033[m')
                                                if n20 > 0:
                                                    if n20 > 1:
                                                        print(f'\033[mVoc√™ sacou {n20} notas de R$ \033[94m20\033[m')
                                                    else:
                                                        print(f'\033[mVoc√™ sacou 1 nota de R$ \033[94m20\033[m')
                                                if n10 > 0:
                                                    if n10 > 1:
                                                        print(f'\033[mVoc√™ sacou {n10} notas de R$ \033[94m10\033[m')
                                                    else:
                                                        print(f'\033[mVoc√™ sacou 1 nota de R$ \033[94m10\033[m')
                                                if n1 > 0:
                                                    if n1 > 1:
                                                        print(f'\033[mVoc√™ sacou {n1} moedas de R$ \033[94m1\033[m')
                                                    else:
                                                        print(f'\033[mVoc√™ sacou 1 moeda de R$ \033[94m1\033[m')
                                                funcoes.linha('roxo', '16')
                                                sleep(0.6)
                                                break

                            elif funcoes.escolha_usuario == 2:
                                deposito = funcoes.verificar_num('\033[mQuanto deseja depositar? R$\033[92m ')
                                print(f'\033[mVoc√™ tinha um total de R$ {saldo_usuario} e adicionou R$ \033[94m{deposito}\033[m')
                                saldo_usuario += deposito
                                tot_depositado += deposito
                                funcoes.linha('roxo', '16')
                                sleep(0.6)

                            elif funcoes.escolha_usuario == 3:
                                print(f'\033[mSeu saldo √© de R$ \033[94m{saldo_usuario}\033[m')
                                funcoes.linha('roxo', '16')
                                sleep(0.6)
                                
                            else:
                                sleep(0.6)
                                break

                        print(f'Voc√™ depositou R$ \033[94m{tot_depositado}\033[m.')
                        print(f'Seu saldo est√° em R$ \033[94m{saldo_usuario}\033[m')
                        print(f'Voc√™ sacou R$ \033[94m{tot_saque}\033[m')
                        print('\033[3mObrigado por utilizar o caixa eletr√¥nico!üí≥ \033[94mVolte sempre!\033[m')
                        funcoes.linha('azul')

                    else:
                        funcoes.sair_secao('caixa eletr√¥nico', 'amarelo')
                        break

    elif funcoes.escolha_usuario == 8:  # SE√á√ÉO DE CONVER√á√ÉO
        funcoes.titulo('Conver√ß√£o', 'SE√á√ÉO DE CONVER√á√ÉO', 'roxo')

        while True:
            funcoes.menu('Real', 'Dolar', 'Celsius', 'Fahrenheit', 'Kelvin', 'Sair da se√ß√£o de conver√ß√£o')
                
            funcoes.escolha_user('Qual sua op√ß√£o?', 6)

            if funcoes.escolha_usuario == 1:      # R$ -> US$
                valor_dolar = funcoes.verificar_num('\033[mQual o valor do dolar atualmente? US$\033[92m ')
                real = funcoes.verificar_num('\033[mQuantos reais voc√™ quer converter para d√≥lar? R$\033[92m ')
                convertido = real / valor_dolar
                print(f'\n\033[mR$ {(real):.2f} convertido para d√≥lar fica US$ \033[94m{(convertido):.2f}\033[m'.replace('.', ','))
                
                funcoes.continuar_def('Deseja continuar convertendo')
                    
                if funcoes.continuar == 'N':
                    funcoes.linha('amarelo')
                    break
                else:
                    funcoes.linha('roxo')
            
            elif funcoes.escolha_usuario == 2:    # US$ -> R$
                valor_dolar = funcoes.verificar_num('\n\033[mQual o valor do dolar atualmente? US$\033[92m ')
                dolar = funcoes.verificar_num('\033[mQuantos dolares voc√™ quer converter para real? US$\033[92m ')
                convertido = dolar * valor_dolar
                print(f'\n\033[mUS$ {(dolar):.2f} convertido para real fica R$ \033[94m{(convertido):.2f}\033[m'.replace('.', ','))
                
                funcoes.continuar_def('Deseja continuar convertendo')
                
                if funcoes.continuar == 'N':
                    funcoes.linha('amarelo')
                    break
                else:
                    funcoes.linha('roxo')

            elif funcoes.escolha_usuario == 3:    # Celcius
                funcoes.linha('azul', '50')
                while True:
                    funcoes.menu('Celsius -> Fahrenheit', 'Celsius -> Kelvin', 'Sair de se√ß√£o de Celsius')

                    funcoes.escolha_user('Qual sua op√ß√£o?', 3)

                    if funcoes.escolha_usuario == 1:
                        celsius = funcoes.verificar_num('\n\033[mQual a temperatura em ¬∞C\033[92m ')
                        convercao = (9 * celsius) / 5 + 32
                        print(f'\n\033[mA temperatura de {celsius}¬∞C convertida para Fahrenheit √© \033[94m{convercao}¬∞F\033[m')

                        funcoes.continuar_def('Deseja continuar convertendo graus Celsius')
                        
                        if funcoes.continuar == 'N':
                            funcoes.linha('roxo')
                            break
                        else:
                            funcoes.linha('azul')

                    elif funcoes.escolha_usuario == 2:
                        celsius = funcoes.verificar_num('\n\033[mQual a temperatura em ¬∞C\033[92m ')
                        convercao = 273.15 + celsius
                        print(f'\n\033[mA temperatura de {celsius}¬∞C convertida para Kelvin √© \033[94m{convercao}¬∞K\033[m')
                    
                        funcoes.continuar_def('Deseja continuar convertendo graus Celsius')
                        
                        if funcoes.continuar == 'N':
                            funcoes.linha('roxo')
                            break
                        else:
                            funcoes.linha('azul')

                    else:
                        funcoes.sair_secao('graus celcius', 'roxo')
                        break

            elif funcoes.escolha_usuario == 4:    # Fahrenheit
                print('\033[94m~\033[m'*50)
                while True:
                    funcoes.menu('Fahrenheit -> Celsius', 'Fahrenheit -> Kelvin', 'Sair da se√ß√£o de Fahrenheit')

                    funcoes.escolha_user('Qual sua op√ß√£o?', 3)

                    if funcoes.escolha_usuario == 1:
                        fahrenheit = funcoes.verificar_num('\033[mQual a temperatura em ¬∞F\033[92m ')
                        convercao = (fahrenheit - 32) / 1.8
                        print(f'\033[mA temperatura de {fahrenheit}¬∞F convetida para Celsius fica \033[94m{(convercao):.1f}¬∞C\033[m')

                        funcoes.continuar_def('Deseja continuar convertendo graus Fahrenheit')
                        
                        if funcoes.continuar == 'N':
                            funcoes.linha('roxo')
                            break
                        else:
                            funcoes.linha('azul')

                    elif funcoes.escolha_usuario == 2:
                        fahrenheit = funcoes.verificar_num('\033[mQual a temperatura em ¬∞F\033[92m ')
                        convercao = (fahrenheit - 32) * 5/9 + 273
                        print(f'\033[mA temperatura de {fahrenheit}¬∞F convetida para Kelvin fica \033[94m{(convercao):.1f}¬∞K\033[m')

                        funcoes.continuar_def('Deseja continuar convertendo graus Fahrenheit')
                        
                        if funcoes.continuar == 'N':
                            funcoes.linha('roxo')
                            break
                        else:
                            funcoes.linha('azul')

                    else:
                        funcoes.sair_secao('graus Fahrenheit', 'roxo')
                        break

            elif funcoes.escolha_usuario == 5:    # Kelvin
                print('\033[94m~\033[m'*50)
                while True:
                    funcoes.menu('Kelvin -> Celsius', 'Kelvin -> Fahrenheit', 'Sair da se√ß√£o de Kelvin')

                    funcoes.escolha_user('Qual sua op√ß√£o?', 3)

                    if funcoes.escolha_usuario == 1:
                        kelvin = funcoes.verificar_num('\033[mQual a temperatura em ¬∞K\033[92m ')
                        convercao = kelvin - 273
                        print(f'\033[mA temperatura de {kelvin}¬∞K convetida para Celsius fica \033[94m{(convercao):.1f}¬∞C\033[m')

                        funcoes.continuar_def('Deseja continuar convertendo graus Kelvin')
                        
                        if funcoes.continuar == 'N':
                            funcoes.linha('roxo')
                            break
                        else:
                            funcoes.linha('azul')

                    elif funcoes.escolha_usuario == 2:
                        kelvin = funcoes.verificar_num('\033[mQual a temperatura em ¬∞K\033[92m ')
                        convercao = (kelvin - 273) * 1.8 + 32
                        print(f'\033[mA temperatura de {kelvin}¬∞K convetida para Fahrenheit fica \033[94m{(convercao):.1f}¬∞F\033[m')

                        funcoes.continuar_def('Deseja continuar convertendo graus Kelvin')
                        
                        if funcoes.continuar == 'N':
                            funcoes.linha('roxo')
                            break
                        else:
                            funcoes.linha('azul')

                    else:
                        funcoes.sair_secao('graus Kelvin', 'roxo')
                        break
            
            else:
                funcoes.sair_secao('conver√ß√£o', 'amarelo')
                break

    elif funcoes.escolha_usuario == 9:  # SE√á√ÉO DE DESCONTO
        funcoes.titulo('Desconto', 'SE√á√ÉO DE DESCONTO', 'roxo')

        while True:
            funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de desconto')

            funcoes.escolha_user('Qual sua op√ß√£o?', 2)

            if funcoes.escolha_usuario == 1:
                while True:
                    usuario_porcentagem = funcoes.verificar_num('\n\033[mQual a porcentagem do desconto?\033[92m ')
                    usuario_valor = funcoes.verificar_num('\033[mQual o valor do produto/indiv√≠duo?\033[92m ')
                    if usuario_porcentagem >= 1:
                        usuario_porcentagem /= 100
                    desconto = usuario_porcentagem * usuario_valor

                    print(f'\n\033[mO valor {(usuario_valor):.2f} teve um desconto de {(desconto):.2f} e no total ficou \033[94m{(usuario_valor - desconto):.2f}\033[m no final'.replace('.', ','))

                    funcoes.continuar_def('Deseja continuar')
                        
                    if funcoes.continuar == 'N':
                        break
                    else:
                        funcoes.linha('azul')

            funcoes.sair_secao('desconto', 'amarelo')
            break

    elif funcoes.escolha_usuario == 10: # SE√á√ÉO DE AUMENTO
        funcoes.titulo('Aumento', 'SE√á√ÉO DE AUMENTO', 'roxo')

        while True:
            funcoes.menu('Iniciar programa', 'Sair da se√ß√£o de aumento')

            funcoes.escolha_user('Qual sua op√ß√£o?', 2)

            if funcoes.escolha_usuario == 1:
                while True:
                    usuario_porcentagem = funcoes.verificar_num('\n\033[mQual a porcentagem do aumento?\033[92m ')
                    usuario_valor = funcoes.verificar_num('\033[mQual o valor do produto/indiv√≠duo?\033[92m ')
                    if usuario_porcentagem >= 1:
                        usuario_porcentagem /= 100
                    desconto = usuario_porcentagem * usuario_valor

                    print(f'\n\033[mO valor de {(usuario_valor):.2f} teve um aumento de {(desconto)} e no total ficou \033[94m{(usuario_valor + desconto):.2f}\033[m'.replace('.', ','))

                    funcoes.continuar_def('Deseja continuar')
                        
                    if funcoes.continuar == 'N':
                        break
                    else:
                        funcoes.linha('azul')

            funcoes.sair_secao('aumento', 'amarelo')
            break

    elif funcoes.escolha_usuario == 11: # SE√á√ÉO DE JUROS
        funcoes.titulo('Juros', 'SE√á√ÉO DE JUROS', 'roxo')

        while True:
            funcoes.menu('Juros Simples', 'Juros Composto', 'Sair da se√ß√£o de juros')

            funcoes.escolha_user('Qual sua op√ß√£o?', 2)

            if funcoes.escolha_usuario == 1:      # Juros Simples
                funcoes.titulo('Juros Simples', 'SE√á√ÉO DE JUROS SIMPLES', 'azul')

                usuario_valor_total = funcoes.verificar_num('\n\033[mQual o pre√ßo total do seu produto? R$\033[92m ')
                usuario_parcelas = funcoes.verificar_num('\033[mVai parcelar em quantas vezes?\033[92m ', forcar_valor_int=True)
                usuario_juros = funcoes.verificar_num('\033[mQual a porcentagem de juros?\033[92m ')
                if usuario_juros >= 1:
                    usuario_juros /= 100
                parcelas = usuario_valor_total / usuario_parcelas
                juros = usuario_juros * usuario_valor_total

                print(f'\n\033[mSeu produto de R$ {(usuario_valor_total):.2f} foi parcelado em {usuario_parcelas} vezes. Logo, R$ {(parcelas):.2f} acompanhado de um juros de R$ {(juros):.2f}, que totaliza R$ {parcelas + juros} ao m√™s. No final, o produto custar√° um total de R$ \033[94m{(usuario_valor_total + (juros * usuario_parcelas)):.2f}\033[m')
                funcoes.linha('azul')

            elif funcoes.escolha_usuario == 2:    # Juros Composto
                funcoes.titulo('Juros Composto', 'SE√á√ÉO DE JUROS COMPOSTO', 'azul')

                produto = funcoes.verificar_num('\033[mPre√ßo total do produto: R$ \033[92m ')
                parcelas_usuario = funcoes.verificar_num('\033[mIr√° parcelar em quantas vezes?\033[92m ', forcar_valor_int=True)
                juros_usuario = funcoes.verificar_num('\033[mQual a porcentagem de juros?\033[92m ')
                if juros_usuario >= 1:
                    juros_usuario /= 100

                tot = produto * ((juros_usuario + 1)**parcelas_usuario)

                print('')
                for c in range(1, parcelas_usuario + 1):
                    juros = (produto * juros_usuario) + produto
                    produto += (produto * juros_usuario)
                    print(f'\033[3;94m{c}¬™ Parcela:\033[m R$ {(juros):.2f}')
                print('')

                print(f'No final seu produto custar√° R$ \033[94m{(tot):.2f}\033[m')
                funcoes.linha('azul', '50')

            else:
                funcoes.sair_secao('juros', 'amarelo')
                break

    elif funcoes.escolha_usuario == 12:
        funcoes.titulo('Sistema de ajuda', 'SE√á√ÉO DE SISTEMA DE AJUDA', 'roxo')

        while True:
            try:
                comando = str(input('\n\033[mCom qual Fun√ß√£o/Biblioteca posso ajudar? [0 para interromper]\033[92m '))
                if comando == '0':
                    funcoes.sair_secao('sistema de ajuda', 'amarelo')
                    break
            except KeyboardInterrupt:
                funcoes.interromper()
            else:
                print()
                funcoes.linha('azul')
                print('\033[3m')
                help(comando)
                funcoes.linha('azul')

    else:
        sleep(0.7)
        print('\n\033[mObrigado por ultilizar este programa.\033[3;94m Volte Sempre!')
        print('https://github.com/pedrosinsenp\033[m')
        print('Para contato >> \033[3;94mpedrosinsenp@gmail.com\033[m')

        funcoes.tempo()

        try:
            urllib.request.urlopen('https://github.com/pedrosinsenp')
        except:
            print('Acessa l√° meu github!')
        else:
            open('https://github.com/pedrosinsenp')
        break